# ~/.shell_functions: included in ~/.bashrc, contains custom POSIX-compliant shell functions and aliases

# Formatting output

# Font weight
bold=$(tput bold)
normal=$(tput sgr0)

# Font color
black=$(tput setaf 0)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
reset=$(tput setaf 9)


###
### Linux / General
###

# Directory shortcuts
alias cd_linux="cd ~/linux"
alias cd_lx="cd ~/linux"
alias cd_websites="cd ~/websites"
alias cd_web="cd ~/websites"
alias cd_misc="cd ~/misc"

# Creates an alias for every directory in ~/websites/
for dir in ~/websites/*/
do
    dir=${dir%*/} 			# remove the trailing "/"
    website="${dir##*/}"    # print everything after the final "/"
	alias cd_$website="cd ~/websites/$website"
done

# Initialize Linux
linux_initialize () {
	echo "${bold}Initializing Linux...${normal}"
	echo ""

	# Update IP address in Windows and Linux hosts files (IP changes on reboot)
	hosts_files_update
	echo ""

	# Start Apache2 and MySQL
	apache_mysql_start
	echo ""

	# Enable WordPress CLI autocompletion
	wp_cli_enable_autocompletion
	echo ""

	# Check for upgrade
	linux_upgrade
}

# Upgrade Linux
# update: downloads package information
# upgrade: install upgrades using updated package data
linux_upgrade () {
	echo "${bold}Upgrading Linux${normal}"
	sudo apt update
	sudo apt upgrade
}

# Update IP address in Windows and Linux hosts files (IP changes on reboot)
hosts_files_update () {
	echo "${bold}Updating IP Address in Windows and Linux Hosts Files${normal}"

	# Set hosts files variables
	linux_hosts_file="/etc/hosts"
	windows_hosts_file="/mnt/c/Windows/System32/drivers/etc/hosts"

	# Get current IP address in Linux hosts files
	linux_old_ip=$(sudo cat ${linux_hosts_file} | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" | tail -1)
	windows_old_ip=$(sudo cat ${windows_hosts_file} | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" | tail -1)

	# Get IP address
	ip=$(hostname -I | cut -d' ' -f1)

	# Update Linux hosts file
	echo "- Updating Linux hosts file $linux_hosts_file"
	if [ $linux_old_ip != $ip ]; then
		echo "❕ Replacing old IP address $linux_old_ip with new IP addresss $ip in $linux_hosts_file"
		sudo sed -i "s/$linux_old_ip/$ip/g" $linux_hosts_file
	else
		echo "✅ No updated needed in $linux_hosts_file"
	fi

	# Update Windows hosts file
	echo "- Updating Windows hosts file $windows_hosts_file"
	if [ $windows_old_ip != $ip ]; then
		echo "❕ Replace old IP address $windows_old_ip with new IP addresss $ip in $windows_hosts_file"
		echo "Open cmd.exe as Administrator and run:"
		echo "notepad.exe C:/Windows/System32/drivers/etc/hosts"
		read -p "Press ENTER to continue to continue and reload Apache" input
		sudo service apache2 reload
		#echo "Replacing old IP address $windows_old_ip with new IP addresss $ip in $windows_hosts_file"
		#sudo sed -i "s/$windows_old_ip/$ip/g" "$windows_hosts_file"
	else
		echo "✅ No updated needed in $windows_hosts_file"
	fi
}

###
### Apache and MySQL
###

alias apache_status="sudo service apache2 status"
alias apache_restart="sudo service apache2 restart"
alias apache_reload="sudo service apache2 reload"
alias apache_start="sudo service apache2 start"
alias apache_stop="sudo service apache2 stop"

alias mysql_status="sudo service mysql status"
alias mysql_restart="sudo service mysql restart"
alias mysql_reload="sudo service mysql reload"
alias mysql_start="sudo service mysql start"
alias mysql_stop="sudo service mysql stop"

# Get Apache2 and MySQL status
apache_mysql_status () {
	echo "${bold}Getting Apache2 and MySQL status${normal}"

	# Get Apache2 status
	echo "- Getting Apache status"
	if sudo service apache2 status | grep -q "apache2 is not running"; then
		echo "❌ Apache2 is not running"
	else
		echo "✅ Apache2 is running"
	fi

	# Get MySQL status
	echo "- Getting MySQL status"
	if sudo service mysql status | grep -q "MySQL is stopped"; then
		echo "❌ MySQL is not running"
	else
		echo "✅ MySQL is running"
	fi
}

# Restart Apache2 and MySQL
apache_mysql_restart () {
	echo "${bold}Restarting Apache2 and MySQL${normal}"

	# Restart Apache2
	echo "- Restaring Apache"
	sudo service apache2 restart

	# Restart MySQL
	echo "- Restarting MySQL"
	sudo service mysql restart
}

# Reload Apache2 and MySQL (don't restart, just re-read configuration files)
apache_mysql_reload () {
	echo "${bold}Reloading Apache2 and MySQL${normal}"

	# Reload Apache2
	echo "- Reloading Apache"
	sudo service apache2 reload

	# Reload MySQL
	echo "- Reloading MySQL"
	sudo service mysql reload
}

# Start Apache2 and MySQL
apache_mysql_start () {
	echo "${bold}Starting Apache2 and MySQL${normal}"

	# Start Apache2 if not running
	echo "- Staring Apache"
	if sudo service apache2 status | grep -q "apache2 is not running"; then
		sudo service apache2 start
	else
		echo "✅ Apache2 is already running"
	fi

	# Start MySQL if not running
	echo "- Starting MySQL"
	if sudo service mysql status | grep -q "MySQL is stopped"; then
		sudo service mysql start
	else
		echo "✅ MySQL is already running"
	fi
}

# Stop Apache2 and MySQL
apache_mysql_stop () {
	echo "${bold}Stopping Apache2 and MySQL${normal}"

	# Stop Apache2 if running
	echo "- Stopping Apache"
	if sudo service apache2 status | grep -q "apache2 is not running"; then
		echo "✅ Apache2 is not running"
	else
		sudo service apache2 stop
	fi

	# Stop MySQL if running
	echo "- Stopping MySQL"
	if sudo service mysql status | grep -q "MySQL is stopped"; then
		echo "✅ MySQL is not running"
	else
		sudo service mysql stop
	fi
}

###
### WordPress
###

# WGet latest version of WordPress
alias wp_wget="wget https://wordpress.org/latest.tar.gz; tar -xzvf latest.tar.gz"

# Set WordPress file permissions
wp_set_permissions () {
	echo "${bold}Setting WordPress File Permissions${normal}"

	if [ $# = 1 ]; then
		echo "- Changing permissions for directories in $1 to 755"
		find $1 -type d -exec sudo chmod 755 {} \;
		echo "- Changing permissions for files in $1 to 644"
		find $1 -type f -exec sudo chmod 644 {} \;
		echo "- Changing permissions for $1/wp-config.php to 660"
		sudo chmod 660 $1/wp-config.php;
	else
		echo "❗ Usage: wp_fix_permissions [/full/path/to/WordPress/website], e.g. wp_fix_permissions ~/websites/wordpress"
	fi
}

# Enable WordPress CLI autocompletion
# https://github.com/wp-cli/wp-cli/blob/master/utils/wp-completion.bash
wp_cli_enable_autocompletion () {
	echo "${bold}Enabling WordPress CLI Autocompletion${normal}"

	# Enable WordPress CLI autocompletion
	_wp_complete() {
		local OLD_IFS="$IFS"
		local cur=${COMP_WORDS[COMP_CWORD]}

		IFS=$'\n';  # want to preserve spaces at the end
		local opts="$(wp cli completions --line="$COMP_LINE" --point="$COMP_POINT")"

		if [ "$opts" =~ \<file\>\s* ]
		then
			COMPREPLY=( $(compgen -f -- $cur) )
		elif [ $opts = "" ]
		then
			COMPREPLY=( $(compgen -f -- $cur) )
		else
			COMPREPLY=( ${opts[*]} )
		fi

		IFS="$OLD_IFS"
		return 0
	}
	
	complete -o nospace -F _wp_complete wp
}